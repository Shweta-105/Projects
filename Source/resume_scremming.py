# -*- coding: utf-8 -*-
"""Resume_Scremming.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BNcIcUzDAHyS7OEdHadoYILITNKBcR0X
"""

!pip install pdfminer.six python-docx pandas spacy
!python -m spacy download en_core_web_sm

from pdfminer.high_level import extract_text

def extract_TFP(pdf_path):  # ✅ Correct
    text = extract_text(pdf_path)
    return text

# Calling the function with your PDF file
pdf_text = extract_TFP("resume_sample.pdf")
print(pdf_text)

# used for cleaning the data set
import re

def clean_text(text):
    # Remove extra spaces, newlines, and special characters
    text = re.sub(r'\s+', ' ', text)  # Remove extra whitespaces
    text = re.sub(r'[^\w\s.@]', '', text)  # Remove special characters (except . and @)
    return text.strip()

# Cleaned text
cleaned_text = clean_text(pdf_text)
print(cleaned_text)

# Extract Candidate Name form Resume
import spacy

# Load the spaCy English model
nlp = spacy.load("en_core_web_sm")

def c_name(text):
    doc = nlp(text)
    for ent in doc.ents:
        if ent.label_ == "PERSON":  # If entity is a person’s name
            return ent.text
    return "Name not found"

# Extract name from the resume
candidate_name = c_name(cleaned_text)
print("Candidate Name:", candidate_name)

# Extract Candidate Email form Resume

def c_email(text):
    email_pattern = r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}"
    match = re.search(email_pattern, text)
    return match.group(0) if match else "Email not found"

# Extract email
candidate_email = c_email(cleaned_text)
print("Email:", candidate_email)

# Extract Candidate Mobile/Phone Number form Resume

def c_phone_number(text):
    phone_pattern = r"\+?\d{1,3}[-.\s]?\(?\d{3}\)?[-.\s]?\d{3}[-.\s]?\d{4}"
    match = re.search(phone_pattern, text)
    return match.group(0) if match else "Phone number not found"

# Extract phone number
candidate_phone = c_phone_number(cleaned_text)
print("Phone:", candidate_phone)

# Extract Candidate Skills form Resume

def c_skills(text):
    skills_list = [
        "Python", "SQL", "Machine Learning", "Data Science", "Deep Learning",
        "NLP", "Tableau", "Power BI", "Java", "C++", "Pandas", "NumPy", "Excel"
    ]
    found_skills = [skill for skill in skills_list if skill.lower() in text.lower()]
    return found_skills if found_skills else ["No skills found"]

# Extract skills
candidate_skills = c_skills(cleaned_text)
print("Skills:", candidate_skills)

# Extract Candidate Education form Resume

def c_education(text):
    education_keywords = ["B.Tech", "M.Tech", "B.Sc", "M.Sc", "MBA", "PhD", "Bachelor", "Master"]
    found_education = [edu for edu in education_keywords if edu in text]
    return found_education if found_education else ["Education not found"]

# Extract education
candidate_education = c_education(cleaned_text)
print("Education:", candidate_education)

# Extract Candidate Experience form Resume

def c_experience(text):
    experience_pattern = r"\b(\d+)\+?\s*years?\s*experience\b"
    match = re.search(experience_pattern, text, re.IGNORECASE)
    return match.group(0) if match else "No Experience"

# Extract experience
candidate_experience = c_experience(cleaned_text)
print("Experience:", candidate_experience)

def parse_resume(file_path):
    resume_text = extract_TFP(file_path)
    cleaned_text = clean_text(resume_text)

    candidate_details = {
        "Name": c_name(cleaned_text),
        "Email": c_email(cleaned_text),
        "Phone": c_phone_number(cleaned_text),
        "Education": c_education(cleaned_text),
        "Skills": c_skills(cleaned_text),
    }

    return candidate_details

# Test with sample resume
parsed_resume = parse_resume("resume_sample.pdf")  # Replace with actual resume file
print(parsed_resume)

!pip install mysql-connector-python

import mysql.connector

db = mysql.connector.connect(
    host="shortline.proxy.rlwy.net",
    port=19531,
    user="root",
    password="NOXOHFPeLrBQyfFuoDnafbmFOzknQkot",
    database="railway"
)

print("Connected successfully!")

cursor = db.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS skills (
    id INT AUTO_INCREMENT PRIMARY KEY,
    skill_name VARCHAR(255)
)
""")
db.commit()

parsed_resume = parse_resume("resume_sample.pdf")
print(parsed_resume)

skills_list = parsed_resume["Skills"]

for skill in skills_list:
    cursor.execute("INSERT INTO skills (skill_name) VALUES (%s)", (skill,))

db.commit()
print("Skills inserted successfully!")

cursor.execute("SELECT * FROM skills")
for row in cursor.fetchall():
    print(row)

cursor.execute("""
CREATE TABLE IF NOT EXISTS resumes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255),
    phone VARCHAR(50),
    education TEXT,
    skills TEXT
)
""")
db.commit()

# Example extracted data
name = "John Doe"
email = "john@example.com"
phone = "1234567890"
education = "B.Sc in Computer Science"
skills = "Python, SQL, Data Analysis"

# Insert query
cursor.execute("""
    INSERT INTO resumes (name, email, phone, education, skills)
    VALUES (%s, %s, %s, %s, %s)
""", (name, email, phone, education, skills))

# Commit changes to save them
db.commit()

print("Resume data inserted successfully!")

cursor.execute("SELECT * FROM resumes")
rows = cursor.fetchall()

# Display each row
for row in rows:
    print(row)

cursor.close()
db.close()

import mysql.connector

# Re-establish the database connection
db = mysql.connector.connect(
    host="shortline.proxy.rlwy.net",
    port=19531,
    user="root",
    password="NOXOHFPeLrBQyfFuoDnafbmFOzknQkot",
    database="railway"
)

# Create a new cursor
cursor = db.cursor()

print("Database connection re-established and new cursor created.")

# Example data (replace with parsed values later)
name = "John Doe"
email = "john@example.com"
phone = "1234567890"
education = "B.Sc in Computer Science"
skills = "Python, SQL, Data Analysis"

# Insert into table
cursor.execute("""
INSERT INTO resumes (name, email, phone, education, skills)
VALUES (%s, %s, %s, %s, %s)
""", (name, email, phone, education, skills))
db.commit()

print("✅ Resume inserted successfully!")

cursor.execute("SELECT * FROM resumes")
for row in cursor.fetchall():
    print(row)

cursor.execute("SELECT * FROM resumes")
row = cursor.fetchone()
print(row)

"""Search resumes by skills

"""

skill_to_search = "Python"
query = "SELECT DISTINCT name, email, phone, education, skills FROM resumes WHERE skills LIKE %s"
cursor.execute(query, (f"%{skill_to_search}%",))

results = cursor.fetchall()
for row in results:
    print(row)

"""Search Resume by Education"""

education_to_search = "Bachelor of Engineering"
query = "SELECT DISTINCT name, email, phone, education, skills FROM resumes WHERE education LIKE %s"
cursor.execute(query, (f"%{education_to_search}%",))

results = cursor.fetchall()

if results:
    for row in results:
        print(row)
else:
    print("No match found")

"""Rank Candidates by matching skills"""

required_skills = ["Python", "SQL", "Data Analysis"]

query = "SELECT DISTINCT name, skills FROM resumes"
cursor.execute(query)
resumes = cursor.fetchall()

ranked = []

for name, skills in resumes:
    score = sum(skill.lower() in skills.lower() for skill in required_skills)
    ranked.append((name, skills, score))

# Sort by score (highest first)
ranked.sort(key=lambda x: x[2], reverse=True)

print("Ranked candidates:")
for r in ranked:
    print(f"Name: {r[0]}, Skills: {r[1]}, Score: {r[2]}")

"""Exprot Results to CSV"""

import csv

cursor.execute("SELECT * FROM resumes")
data = cursor.fetchall()

with open("resumes_output.csv", "w", newline="", encoding="utf-8") as file:
    writer = csv.writer(file)
    # Write header
    writer.writerow(["ID", "Name", "Email", "Phone", "Education", "Skills"])
    # Write data
    writer.writerows(data)

print("✅ Data exported to resumes_output.csv")

"""Final Script for Resume Screening"""

import mysql.connector
import csv

# ---------- DATABASE CONNECTION ----------
db = mysql.connector.connect(
    host="shortline.proxy.rlwy.net",  # your host
    port=19531,                       # your port
    user="root",                      # your username
    password="NOXOHFPeLrBQyfFuoDnafbmFOzknQkot",         # your password
    database="railway"                # your database
)

cursor = db.cursor()

# ---------- USER INPUT ----------
skill_to_search = input("Enter skill to search: ").strip()
education_to_search = input("Enter education to search: ").strip()

# List of required skills for ranking
required_skills = ["Python", "SQL", "Data Analysis"]

# ---------- FETCH FILTERED RESUMES ----------
query = """
SELECT DISTINCT name, email, phone, education, skills
FROM resumes
WHERE skills LIKE %s AND education LIKE %s
"""
cursor.execute(query, (f"%{skill_to_search}%", f"%{education_to_search}%"))
resumes = cursor.fetchall()

if not resumes:
    print("No match found")
else:
    # ---------- RANK CANDIDATES ----------
    ranked = []
    for name, email, phone, education, skills in resumes:
        score = sum(skill.lower() in skills.lower() for skill in required_skills)
        ranked.append((name, email, phone, education, skills, score))

    ranked.sort(key=lambda x: x[5], reverse=True)

    # ---------- EXPORT TO CSV ----------
    with open("filtered_ranked_resumes.csv", "w", newline="", encoding="utf-8") as file:
        writer = csv.writer(file)
        writer.writerow(["Name", "Email", "Phone", "Education", "Skills", "Score"])
        writer.writerows(ranked)

    print("✅ Filtered & ranked resumes exported to filtered_ranked_resumes.csv")

# ---------- CLOSE CONNECTION ----------
cursor.close()
db.close()

